import requests
from datetime import datetime, timezone, timedelta
import json
import socket
import random
import struct
import time

'''
SBACK-860: Copy association operation cache implementation from SDS to AIS

Non-functional change. Should be no obvious regressions. Performance may 
want to test cache performance.

associate mac ← ip ← domain at t1 and then mac ← ip at t1+ 5sec
To verify cache is being hit, see:
https://platform-dev06.dragos.services/assets/admin/index.html
'''

# utcnow() has funky issues (bug?) with using timedelta() to add/subtract
# timestamps. So, ditched it for now(timezone.utc).
# Sidenote, utcnow() also isn't timezone aware.
current_time = datetime.now(timezone.utc)
current_time_str = current_time.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
print (f'starting time is = {current_time_str}')

#url = "https://sitestore-test-reg4.hq.dragos.services/assets/api/v4/associateAddresses"
url = "https://platform-dev06.dragos.services/assets/api/v4/associateAddresses"
headers = {
  'Content-Type': 'application/json',
  'Authorization': 'Basic YWRtaW46RHJAZ29zU3lzdDNt'
}

# json grabbed from POSTMAN. Could have just used python code generated by POSTMAN
# but variable substitution into a python dict (produced by json.loads()) is easier/cleaner
# than doing it a python string.
# Using 'r' for 'raw' data to keep python from complaining about json value,'true',
# not being defined.
payload_json_1 = r'''
{
    "lookups": {
        "domain": {
            "type": "coordinates",
            "coordinates": {
                "type": "DOMAIN",
                "networkId": "test_network1",
                "value": "test.com"
            },
            "createIfMissing": true
        },
        "mac": {
            "type": "coordinates",
            "coordinates": {
                "type": "MAC",
                "networkId": "test_network1",
                "value": "AA:AA:AA:AA:AA:AA"
            }
        },
        "ip": {
            "type": "coordinates",
            "coordinates": {
                "type": "IP",
                "value": "ip_stub",
                "networkId": "test_network3"
            },
            "createIfMissing": true
        }
    },
    "associateLookups": {
        "ip": ["domain"],
        "mac": ["ip"]
    },
    "at": "time_stub"
    }''' 

payload_json_2 = r'''
{
    "lookups": {
        "mac": {
            "type": "coordinates",
            "coordinates": {
                "type": "MAC",
                "networkId": "test_network1",
                "value": "AA:AA:AA:AA:AA:AA"
            }
        },
        "ip": {
            "type": "coordinates",
            "coordinates": {
                "type": "IP",
                "value": "ip_stub",
                "networkId": "test_network3"
            },
            "createIfMissing": true
        }
    },
    "associateLookups": {
        "mac": ["ip"]
    },
    "at": "time_stub"
    }''' 

for i in range(1):

    print(f'====> loop({i})')

    # utcnow() has funky issues (bug?) with using timedelta() to add/subtract
    # timestamps. So, ditched it for now(timezone.utc).
    # Sidenote, utcnow() also isn't timezone aware.
    current_time = datetime.now(timezone.utc)
    current_time_str = current_time.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
    print (f't1 = {current_time_str}')

    # Create "random" and hopefully unique IP_1 
    IP_1 = socket.inet_ntoa(struct.pack('>I', random.randint(1, 0xffffffff)))

    # Convert json into python object (dict) for easier variable substitution of incrementing
    # timestamp and IP[1|2]
    payload_1 = json.loads(payload_json_1)
    payload_1['lookups']['ip']['coordinates']['value'] = IP_1
    payload_1['at'] = current_time_str

    # Make 1st request and output the status code and response
    response_1 = requests.request("POST", url, headers=headers, json=payload_1, verify=False)
    print(f'==> status code request_1 = {response_1.status_code}')
    print(response_1.text)

    add_5s = current_time + timedelta(seconds=5)
    current_time_str = add_5s.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
    print (f't2 = {current_time_str}')

    payload_2 = json.loads(payload_json_2)
    payload_2['lookups']['ip']['coordinates']['value'] = IP_1
    payload_2['at'] = current_time_str

    # Make 2st request and output the status code and response
    response_2 = requests.request("POST", url, headers=headers, json=payload_2, verify=False)
    print(f'==> status code request_2 = {response_2.status_code}')
    print(response_2.text)

