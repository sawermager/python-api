import requests
from datetime import datetime, timezone, timedelta
import time
import json

#dt = datetime.utcnow()
current_time = datetime.now(timezone.utc)
current_time_str = current_time.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
print (f'starting time now is = {current_time_str}')

# Subtract 4wks from current UTC time. This will be the starting time that is increased in
# a loop by 2min for each request made.
current_sub = current_time - timedelta(weeks=4)

# There may be a magical python lib that creates the exact valid format for the API.
# I didn't see it when poking around for UTC timestamps. So, the valid format is 
# manufactured by hand here instead.
current_time_loop = current_sub.strftime('%Y-%m-%dT%H:%M:%S.%fZ')

url = "https://platform-dev06.dragos.services/assets/api/v4/associateAddresses"
headers = {
  'Content-Type': 'application/json',
  'Authorization': 'Basic YWRtaW46RHJAZ29zU3lzdDNt'
}

for i in range(3):
    print(f'current_time_loop = {current_time_loop}')

    # json grabbed from POSTMAN. Could have just used python code generated by POSTMAN
    # but variable substitution into a python dict (produced by json.loads()) is easier/cleaner
    # than doing it a python string.
    # Using 'r' for 'raw' data to keep python from complaining about json value,'true',
    # not being defined.

    payload_json = r'''{
    "lookups": {
        "mac": {
            "type": "coordinates",
            "coordinates": {
                "type": "MAC",
                "networkId": "test_network1",
                "value": "DE:AD:BE:EF:BE:BE"
            },
            "createIfMissing": true
        },
        "ip": {
            "type": "coordinates",
            "coordinates": {
                "type": "IP",
                "value": "1.2.3.4",
                "networkId": "test_network1"
            },
            "createIfMissing": true
        }
    },
    "associateLookups": {
        "mac": ["ip"]
    },
    "at": "time_stub"
    }''' 

    # Convert json into python object (dict) for easier variable substitution of incrementing
    # timestamp.
    payload = json.loads(payload_json)
    payload['at'] = current_time_loop
    response = requests.request("POST", url, headers=headers, json=payload)
    print(f'==> status code = {response.status_code}')
    print(response.text)

    # Add 2min to current_sub time
    add_2m = current_sub + timedelta(minutes=2)
    current_time_loop = add_2m.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
    current_sub = add_2m
    print(f'current_time_loop = {current_time_loop}')
    payload_json = r'''{
    "lookups": {
        "mac": {
            "type": "coordinates",
            "coordinates": {
                "type": "MAC",
                "networkId": "test_network1",
                "value": "DE:AD:BE:EF:DE:AD"
            },
            "createIfMissing": true
        },
        "ip": {
            "type": "coordinates",
            "coordinates": {
                "type": "IP",
                "value": "1.2.3.4",
                "networkId": "test_network1"
            },
            "createIfMissing": true
        }
    },
    "associateLookups": {
        "mac": ["ip"]
    },
    "at": "time_stub"
    }''' 

    payload = json.loads(payload_json)
    payload['at'] = current_time_loop
    response = requests.request("POST", url, headers=headers, json=payload)
    print(f'==> status code = {response.status_code}')
    print(response.text)

    add_2m = current_sub + timedelta(minutes=2)
    current_time_loop = add_2m.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
    current_sub = add_2m
    print(f'====> loop({i})')

